    private int PIN_NUMBER;

    server.listenOnLocalhost();
}
#define ABSENCE_TIMEOUT 1500

}
#define ABSENCE_TIMEOUT 1500
    if (avg_rate_temp != -1) {
    client->println();
void setup() {
    /**
    if (millis() - this_heart_beat > ABSENCE_TIMEOUT) {
void loop() {
        long interval = this_heart_beat - last_heart_beat;
}
        long interval = this_heart_beat - last_heart_beat;
        print_suc_resp_header(client);
  Serial.begin(9600);
    client->println();

int prox = 8;
   Constants.
    BridgeClient client = server.accept();
    // is "digital" command?
}
        }
    // update heart beat time
     * Fetch the reading from the sensor in the unit of decibel.
    // read the command
        POOL[i] = (double) 0.0;
        // Close connection and free resources.
// beginning time of current period


  pinMode(yellow_pin, INPUT);
    }
    }
        if (POOL[i] == 0) return -1.0;


  attachInterrupt(digitalPinToInterrupt(sensor), inter, RISING);
  }
    if (last_heart_beat > 0 && this_heart_beat > 0) {
        sum += POOL[i];
    if (client) {
}
    return sum / (double) POOL_SIZE;
            if (hr < 0) state = COLLECTING_DATA;
    Serial.print(pool[i]);
    return sum / (double) POOL_SIZE;
    // is "digital" command?
    // Serial.print("Heart rate reported in micro period as ");
     * @param pinNumber Pin number of the sensor.
int state = SOURCE_ABSENT;
    attachInterrupt(digitalPinToInterrupt(2), inter, RISING);

    }
int count = 0;
    }
*/
        client->print(", \"hr\": ");
// heart beat count
  Serial.print(" from pin ");
#define COLLECTING_DATA 1
     * Firmata instance.
void setup() {
int pool_i = 0;
            POOL[POOL_INDEX++] = (this_heart_beat - last_heart_beat) / 1000.0;
  }
    Serial.print("HR: ");
  attachInterrupt(digitalPinToInterrupt(sensor), inter, RISING);
  pinMode(id_in_2, INPUT);
    Serial.begin(9600);
    }
    client->println();
double cacl() {
  pinMode(prox, INPUT);
    Serial.println(hr);
  // set up pin mode
  Serial.begin(9600);
        print_suc_resp_header(client);
        client.stop();
    init_pool();
#define sensor 2


}
        client.stop();
